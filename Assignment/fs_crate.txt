#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform sampler2D second_texture;
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float cuttoff;
  float outerCuttoff;
  vec3 direction;
};

uniform Light light;  
uniform Light spotlight;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

vec3 calculateColourFromLight(Light givenLight) {
  // ambient
  vec3 ambient = givenLight.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;

  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(givenLight.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = givenLight.diffuse * (diff * material.diffuse) * texture(first_texture, aTexCoord).rgb; 
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = givenLight.specular * (spec * material.specular) * texture(second_texture, aTexCoord).rbg;

  return ambient + diffuse + specular;
} 

void main() {
  vec3 resultOfMainLight = calculateColourFromLight(light);
  
  vec3 lightDir = normalize(spotlight.position - aPos); 
  float theta = dot(lightDir, normalize(-spotlight.direction));
  float epsilon = spotlight.cuttoff - spotlight.outerCuttoff;
  float intensity = clamp((theta - spotlight.outerCuttoff) / epsilon, 0.0, 1.0);
  
  vec3 resultOfSpotlight = calculateColourFromLight(spotlight) * intensity;
  
  vec3 result = resultOfMainLight + resultOfSpotlight;
  
  fragColor = vec4(result, 1.0);
}